parameters:
  variables: {}
  osGroup: ''
  archType: ''
  container: ''
  pool: {}
  isOfficialBuild: false
  runTests: true

jobs:

- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    enableTelemetry: true
    helixRepo: dotnet/msquic
    pool: ${{ parameters.pool }}
    enablePublishBuildArtifacts: true
    enablePublishBuildAssets: ${{ eq(parameters.osGroup, 'Windows') }}
    enablePublishUsingPipelines: true
    enableMicrobuild: true
    graphFileGeneration:
      enabled: false
      includeToolset: false

    jobs:
    - job: ${{ format('{0}_{1}', parameters.osGroup, parameters.archType) }}
      displayName: ${{ format('{0} {1}', parameters.osGroup, parameters.archType) }}
      strategy:
        matrix:
          Release:
            _BuildConfig: Release
          ${{ if eq(parameters.isOfficialBuild, false) }}:
            Debug:
              _BuildConfig: Debug

      ${{ if eq(parameters.runTests, true) }}:
        testResultsFormat: vstest
        testRunTitle: ${{ parameters.osGroup }}_${{ parameters.archType }}_$(_BuildConfig)

      ${{ if ne(parameters.container, '') }}:
        ${{ if eq(parameters.container.registry, 'mcr') }}:
          container: ${{ format('{0}:{1}', 'mcr.microsoft.com/dotnet-buildtools/prereqs', parameters.container.image) }}
        ${{ if ne(parameters.container.registry, 'mcr') }}:
          container: ${{ format('{0}:{1}', parameters.container.registry, parameters.container.image) }}

      variables:
        - _buildScript: build.cmd

        - ${{ if ne(parameters.osGroup, 'Windows') }}:
          - _buildScript: ./build.sh
          - _outputPath: $(Build.SourcesDirectory)/artifacts/packages/${{ parameters.osGroup }}/${{ parameters.archType }}_$(_BuildConfig)_openssl

        - ${{ if eq(parameters.osGroup, 'macOS') }}:
          - OPENSSL_ROOT_DIR: /usr/local/opt/openssl@1.1

        - _testBuildArg: ''
        - _docker: ''
        - ${{ if eq(parameters.runTests, true) }}:
          - _testBuildArg: -test

        - _officialBuildArgs: ''
        - _signingArgs: ''
        - ${{ if eq(parameters.isOfficialBuild, true) }}:
          - group: DotNet-Symbol-Server-Pats
          - _SignType: real
          - _officialBuildArgs: -publish
                                /p:TeamName=$(_TeamName)
                                /p:OfficialBuildId=$(Build.BuildNumber)
                                /p:DotNetPublishUsingPipelines=true
                                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
          - ${{ if eq(parameters.osGroup, 'Windows') }}:
            - _signingArgs: -sign
                            /p:DotNetSignType=$(_SignType)
        - ${{ if eq(parameters.archType, 'arm64') }}:
          - _buildScript: docker run --volume $BUILD_REPOSITORY_LOCALPATH:/msquic -t mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-arm64v8-20220803130954-bfcd90a apt-get update && apt-get install -y wget && /msquic/build.sh

      steps:
      - checkout: self
        submodules: recursive

      - ${{ if eq(parameters.archType, 'arm64') }}:
        - script: sudo apt-get update && sudo apt-get install -y qemu binfmt-support qemu-user-static docker
        - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes 

      - ${{ if eq(parameters.osGroup, 'Windows') }}:
        - script: $(Build.SourcesDirectory)\eng\common\init-tools-native.cmd -InstallDirectory $(Build.SourcesDirectory)\native-tools -Force
          displayName: Install native dependencies

      - ${{ if eq(parameters.osGroup, 'macOS') }}:
        # use cmake from Brew (that may be different)
        - script:  sed -i .ORI '/cmake/d'  global.json
          displayName: Remove cmake for macOS
        - script: gem install fpm
          displayName: Install fpm

      - script: echo Docker $(_docker) is `pwd` out

      - script: set

      - script: $(_buildScript)
                -ci
                -c $(_BuildConfig)
                $(_testBuildArg)
                $(_signingArgs)
                $(_officialBuildArgs)
                /p:TargetPlatform=${{ parameters.archType }}
        displayName: Build and Publish

      - ${{ if ne(parameters.osGroup, 'Windows') }}:
        - script: ./scripts/make-packages.sh -output $(_outputPath)
          displayName: Make Unix packages
          workingDirectory: src/msquic

        - task: PublishBuildArtifacts@1
          displayName: Push Unix Packages
          inputs:
            PathtoPublish: $(_outputPath)
            PublishLocation: Container
            ArtifactName: UnsignedUnixPackages
          condition: succeeded()
