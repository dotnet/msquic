parameters:
  variables: {}
  osGroup: ''
  archType: ''
  container: ''
  pool: {}
  isOfficialBuild: false
  runTests: true

jobs:

- template: /eng/common/templates/job/job.yml
  parameters:
    enableTelemetry: true
    helixRepo: dotnet/msquic
    pool: ${{ parameters.pool }}
    enablePublishBuildArtifacts: true
    enablePublishBuildAssets: ${{ parameters.isOfficialBuild }}
    enablePublishUsingPipelines: true
    enableMicrobuild: true

    name: ${{ format('{0}_{1}', parameters.osGroup, parameters.archType) }}
    displayName: ${{ format('{0} {1}', parameters.osGroup, parameters.archType) }}
    strategy:
      matrix:
        Release:
          _BuildConfig: Release

    ${{ if eq(parameters.runTests, true) }}:
      testResultsFormat: vstest
      testRunTitle: ${{ parameters.osGroup }}_${{ parameters.archType }}_$(_BuildConfig)

    ${{ if ne(parameters.container, '') }}:
      ${{ if eq(parameters.container.registry, 'mcr') }}:
        container: ${{ format('{0}:{1}', 'mcr.microsoft.com/dotnet-buildtools/prereqs', parameters.container.image) }}
      ${{ if ne(parameters.container.registry, 'mcr') }}:
        container: ${{ format('{0}:{1}', parameters.container.registry, parameters.container.image) }}

    variables:
      - _buildScript: build.cmd

      - ${{ if ne(parameters.osGroup, 'Windows') }}:
        - _buildScript: ./build.sh
        - _outputPath: $(Build.SourcesDirectory)/artifacts/packages/${{ parameters.osGroup }}/${{ parameters.archType }}_$(_BuildConfig)_openssl

      - ${{ if eq(parameters.osGroup, 'macOS') }}:
        - OPENSSL_ROOT_DIR: /usr/local/opt/openssl@1.1

      - _testBuildArg: ''
      - ${{ if eq(parameters.runTests, true) }}:
        - _testBuildArg: -test

      - _officialBuildArgs: ''
      - _signingArgs: ''
      - ${{ if eq(parameters.isOfficialBuild, true) }}:
        - group: DotNet-Symbol-Server-Pats
        - _SignType: real
        - _officialBuildArgs: -publish
                              /p:TeamName=$(_TeamName)
                              /p:OfficialBuildId=$(Build.BuildNumber)
                              /p:DotNetPublishUsingPipelines=true
                              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
        - ${{ if eq(parameters.osGroup, 'Windows') }}:
          - _signingArgs: -sign
                          /p:DotNetSignType=$(_SignType)
      - _crossBuild: ''
      - _buildargs: -ci -c $(_BuildConfig) $(_testBuildArg) $(_signingArgs) $(_officialBuildArgs) /p:TargetArchitecture=${{ parameters.archType }}
      - ${{ if eq(parameters.osGroup, 'Linux') }}:
        - ${{ if eq(parameters.archType, 'arm64') }}:
          - _crossBuild: CC=clang-9 CXX=clang++-9 CFLAGS="--target=aarch64-linux-gnu --sysroot=/crossrootfs/arm64" LDFLAGS='-L/crossrootfs/arm64/lib -L/crossrootfs/arm64/usr/lib/aarch64-linux-gnu'
        - ${{ if eq(parameters.archType, 'arm') }}:
          - _crossBuild: CC=clang-9 CXX=clang++-9 CFLAGS="--target=arm-linux-gnueabihf --sysroot=/crossrootfs/arm" LDFLAGS='-L/crossrootfs/arm/lib -L/crossrootfs/arm/usr/lib/arm-linux-gnueabihf'

    steps:
    - checkout: self
      submodules: recursive

    - ${{ if eq(parameters.osGroup, 'Windows') }}:
      - script: $(Build.SourcesDirectory)\eng\common\init-tools-native.cmd -InstallDirectory $(Build.SourcesDirectory)\native-tools -Force
        displayName: Install native dependencies

    - ${{ if eq(parameters.osGroup, 'macOS') }}:
      - script: sudo gem install fpm
        displayName: Install fpm

    - script: $(_crossBuild) $(_buildScript) $(_buildargs)
      displayName: Build binaries

    - ${{ if ne(parameters.osGroup, 'Windows') }}:
      - script: ./scripts/make-packages.sh -arch ${{ parameters.archType }} -config $(_BuildConfig) -output $(_outputPath)
        displayName: Make Unix packages
        workingDirectory: src/msquic

      - task: PublishBuildArtifacts@1
        displayName: Push Unix Packages
        inputs:
          PathtoPublish: $(_outputPath)
          PublishLocation: Container
          ArtifactName: UnsignedUnixPackages
        condition: succeeded()
